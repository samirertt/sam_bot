<?xml version="1.0" ?>
<sdf version="1.7" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <model name='sam_bot' canonical_link='base_link'>

    <xacro:property name="base_width" value="0.31"/>
    <xacro:property name="base_length" value="0.42"/>
    <xacro:property name="base_height" value="0.18"/>

    <xacro:property name="wheel_radius" value="0.075"/>
    <xacro:property name="wheel_width" value="0.04"/>
    <xacro:property name="wheel_ygap" value="0.025"/>
    <xacro:property name="wheel_zoff" value="-0.045"/>  <!-- Changed to middle height -->
    <xacro:property name="wheel_xoff" value="0.0"/> 
    
    <xacro:property name="caster_radius" value="0.03"/>
    <xacro:property name="caster_xoff" value="0.15"/>  <!-- Half of base_length -->
    <xacro:property name="caster_yoff" value="0.11"/>  <!-- Half of base_width -->
    <xacro:property name="caster_zoff" value="-0.09"/> 
    <xacro:macro name="box_inertia" params="m w h d">
      <inertial>
        <pose>0 0 0 0 0 0</pose> <mass>${m}</mass>
        <inertia> <ixx>${(m/12) * (h*h + d*d)}</ixx>
          <ixy>0.0</ixy>
          <ixz>0.0</ixz>
          <iyy>${(m/12) * (w*w + d*d)}</iyy>
          <iyz>0.0</iyz>
          <izz>${(m/12) * (w*w + h*h)}</izz>
        </inertia>
      </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
      <inertial>
         <pose>0 0 0 ${pi/2} 0 0</pose> <mass>${m}</mass>
        <inertia>
          <ixx>${(m/12) * (3*r*r + h*h)}</ixx>
          <ixy>0.0</ixy>
          <ixz>0.0</ixz>
          <iyy>${(m/12) * (3*r*r + h*h)}</iyy>
          <iyz>0.0</iyz>
          <izz>${(m/2) * (r*r)}</izz>
        </inertia>
      </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r">
      <inertial>
        <pose>0 0 0 0 0 0</pose> <mass>${m}</mass>
        <inertia>
          <ixx>${(2/5) * m * (r*r)}</ixx>
          <ixy>0.0</ixy>
          <ixz>0.0</ixz>
          <iyy>${(2/5) * m * (r*r)}</iyy>
          <iyz>0.0</iyz>
          <izz>${(2/5) * m * (r*r)}</izz>
        </inertia>
      </inertial>
    </xacro:macro>

    <link name='base_link'>
      <visual name="base_link_visual">
        <geometry>
          <box>
            <size>${base_length} ${base_width} ${base_height}</size>
          </box>
        </geometry>
        <material>
          <ambient>0 1 1 1</ambient>
          <diffuse>0 1 1 1</diffuse>
        </material>
      </visual>

      <collision name="base_link_collision">
        <geometry>
          <box>
            <size>${base_length} ${base_width} ${base_height}</size>
          </box>
        </geometry>
        <surface>
            <friction>
              <ode>
                <mu>1.0</mu>
                <mu2>1.0</mu2>
              </ode>
            </friction>
            <contact>
              <ode/>
            </contact>
        </surface>
      </collision>

       <xacro:box_inertia m="15" w="${base_width}" d="${base_length}" h="${base_height}"/>
    </link>

    <xacro:macro name="wheel" params="prefix y_reflect">
      <link name="${prefix}_link">
        <pose>${wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${wheel_zoff} 0 0 0</pose> 
        <visual name="${prefix}_link_visual">
          <pose relative_to="${prefix}_link">0 0 0 ${pi/2} 0 0</pose> <geometry>
            <cylinder>
              <radius>${wheel_radius}</radius>
              <length>${wheel_width}</length>
            </cylinder>
          </geometry>
          <material>
             <ambient>0.3 0.3 0.3 1.0</ambient>
             <diffuse>0.7 0.7 0.7 1.0</diffuse>
          </material>
        </visual>

        <collision name="${prefix}_link_collision">
          <pose>0 0 0 ${pi/2} 0 0</pose> <geometry>
            <cylinder>
              <radius>${wheel_radius}</radius>
              <length>${wheel_width}</length>
            </cylinder>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>1.0</mu>
                <mu2>1.0</mu2>
                <slip1>0.0</slip1>
                <slip2>0.0</slip2>
              </ode>
            </friction>
            <contact>
              <ode>
                <kp>1e+13</kp>
                <kd>1.0</kd>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
              </ode>
            </contact>
          </surface>
        </collision>

        <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
      </link>

      <joint name="${prefix}_joint" type="revolute">
        <parent>base_link</parent>
        <child>${prefix}_link</child>
        <pose>0 0 0 0 0 0</pose> <axis>
          <xyz>0 1 0</xyz>
          <limit>
            <lower>-1e16</lower>
            <upper>1e16</upper>
          </limit>
          <dynamics>
             <damping>0.1</damping>
             <friction>0.1</friction>
          </dynamics>
        </axis>
        <physics>
          <ode>
            <limit>
              <cfm>0</cfm>
              <erp>0.2</erp>
            </limit>
          </ode>
        </physics>
      </joint>
    </xacro:macro>

    <xacro:wheel prefix="drivewhl_l" y_reflect="1" />
    <xacro:wheel prefix="drivewhl_r" y_reflect="-1" />

    <xacro:macro name="caster" params="prefix x_reflect y_reflect">
      <link name="${prefix}_caster">
         <pose>${x_reflect*caster_xoff} ${y_reflect*caster_yoff} ${caster_zoff} 0 0 0</pose> <visual name="${prefix}_caster_visual">
          <geometry>
            <sphere>
              <radius>${caster_radius}</radius>
            </sphere>
          </geometry>
          <material>
             <ambient>0 1 1 1</ambient>
             <diffuse>0 1 1 1</diffuse>
          </material>
        </visual>

        <collision name="${prefix}_caster_collision">
          <geometry>
            <sphere>
              <radius>${caster_radius}</radius>
            </sphere>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>0.001</mu>
                <mu2>0.001</mu2>
                <slip1>1.0</slip1>
                <slip2>1.0</slip2>
              </ode>
            </friction>
            <contact>
              <ode>
                 <kp>1e+13</kp>
                 <kd>1.0</kd>
                 <min_depth>0.001</min_depth>
                 <max_vel>0.1</max_vel>
              </ode>
            </contact>
          </surface>
        </collision>

        <xacro:sphere_inertia m="0.2" r="${caster_radius}"/>
      </link>

      <joint name="${prefix}_caster_joint" type="fixed">
        <parent>base_link</parent>
        <child>${prefix}_caster</child>
        <pose>0 0 0 0 0 0</pose> </joint>
    </xacro:macro>

    <xacro:caster prefix="front_left" x_reflect="1" y_reflect="1" />
    <xacro:caster prefix="front_right" x_reflect="1" y_reflect="-1" />
    <xacro:caster prefix="rear_left" x_reflect="-1" y_reflect="1" />
    <xacro:caster prefix="rear_right" x_reflect="-1" y_reflect="-1" />

    <joint name='imu_joint' type='fixed'>
      <parent>base_link</parent>
      <child>imu_link</child>
      <pose>0.0 0.0 0.01 0 0 0</pose> </joint>

    <link name='imu_link'>
      <pose>0 0 0 0 0 0</pose> <visual name="imu_link_visual">
        <geometry>
          <box><size>0.01 0.01 0.01</size></box>
        </geometry>
      </visual>
      <collision name="imu_link_collision">
         <geometry>
           <box><size>0.01 0.01 0.01</size></box>
         </geometry>
      </collision>
      <xacro:box_inertia m="0.01" w="0.01" d="0.01" h="0.01"/>
      <sensor name="imu_sensor" type="imu">
        <always_on>true</always_on>
        <update_rate>100</update_rate>
        <visualize>true</visualize>
        <topic>/demo/imu</topic>
        <imu>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
              </noise>
            </z>
          </angular_velocity>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
              </noise>
            </z>
          </linear_acceleration>
        </imu>
        <plugin name="gazebo_ros_imu_sensor" filename="libgazebo_ros_imu_sensor.so">
          <ros>
            <remapping>~/out:=imu</remapping>
          </ros>
          <initial_orientation_as_reference>false</initial_orientation_as_reference>
          <frame_name>imu_link</frame_name>
          <update_rate>100</update_rate>
        </plugin>
      </sensor>
    </link>

    <joint name="lidar_joint" type="fixed">
      <parent>base_link</parent>
      <child>lidar_link</child>
      <pose>0.0 0.0 0 0 0 0</pose> </joint>

    <link name='lidar_link'>
       <pose>0.0 0.0 0.12 0 0 0</pose> <visual name="lidar_link_visual">
        <geometry>
          <cylinder>
            <radius>0.0508</radius>
            <length>0.055</length>
          </cylinder>
        </geometry>
      </visual>
      <collision name="lidar_link_collision">
        <geometry>
          <cylinder>
            <radius>0.0508</radius>
            <length>0.055</length>
          </cylinder>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="0.125" r="0.0508" h="0.055"/>
      <sensor name="lidar" type="ray">
        <always_on>true</always_on>
        <visualize>true</visualize>
        <update_rate>5</update_rate>
        <topic>scan</topic>
        <ray>
          <scan>
            <horizontal>
              <samples>360</samples>
              <resolution>1.0</resolution>
              <min_angle>0.0</min_angle>
              <max_angle>6.28</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.12</min>
            <max>3.5</max>
            <resolution>0.015</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <plugin name="gazebo_ros_lidar" filename="libgazebo_ros_ray_sensor.so">
           <ros>
             <remapping>~/out:=scan</remapping>
           </ros>
           <output_type>sensor_msgs/LaserScan</output_type>
           <frame_name>lidar_link</frame_name>
           <update_rate>5</update_rate>
        </plugin>
      </sensor>
    </link>

    <joint name="camera_joint" type="fixed">
      <parent>base_link</parent>
      <child>camera_link</child>
      <pose>0.215 0 0.20 -1.5708 0 -1.5708</pose>
      </joint>

    <link name='camera_link'>
      <pose>0.215 0 0 0 0 0</pose> 
      <visual name="camera_link_visual">
        
        <pose>-0.005 0 0 0 0 0</pose>
        <geometry>
          <box><size>0.015 0.130 0.0222</size></box>
        </geometry>
      </visual>
      <collision name="camera_link_collision">
        <geometry>
          <box><size>0.015 0.130 0.0222</size></box>
        </geometry>
      </collision>
      <xacro:box_inertia m="0.035" w="0.130" d="0.015" h="0.0222"/>
      <sensor name="depth_camera" type="depth">
        <always_on>true</always_on>
        <visualize>true</visualize>
        <update_rate>5.0</update_rate>
        <camera name="camera">
          <horizontal_fov>1.047198</horizontal_fov>
          <image>
            <width>640</width>
            <height>480</height>
            <format>R8G8B8</format>
          </image>
          <depth_camera>
             </depth_camera>
          <clip>
            <near>0.05</near>
            <far>3.0</far>
          </clip>
          <noise>
             <type>gaussian</type>
             <mean>0.0</mean>
             <stddev>0.007</stddev>
          </noise>
        </camera>
        <plugin name="camera_plugin" filename="libgazebo_ros_camera.so">
            <ros>
                <remapping>image_raw:=rgb/image_raw</remapping>
                <remapping>camera_info:=rgb/camera_info</remapping>
                <remapping>depth/image_raw:=depth/image_raw</remapping>
                <remapping>depth/camera_info:=depth/camera_info</remapping>
                <remapping>points:=depth/points</remapping>
            </ros>
            <camera_name>depth_camera</camera_name>
            <frame_name>camera_link</frame_name>
            <hack_baseline>0.0</hack_baseline>
            <min_depth>0.05</min_depth>
            <max_depth>3.0</max_depth>
            <update_rate>5.0</update_rate>
        </plugin>
      </sensor>
    </link>

    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <ros>
        </ros>
      <update_rate>30</update_rate>
      <left_joint>drivewhl_l_joint</left_joint>
      <right_joint>drivewhl_r_joint</right_joint>
      <wheel_separation>${base_width + 2*wheel_ygap}</wheel_separation>
      <wheel_diameter>${2*wheel_radius}</wheel_diameter>
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>
      <command_topic>/demo/cmd_vel</command_topic>
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>false</publish_wheel_tf>
      <odometry_topic>/demo/odom</odometry_topic>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
    </plugin>

    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
       <ros>
         <remapping>~/out:=joint_states</remapping>
       </ros>
      <update_rate>30</update_rate>
    </plugin>

  </model>
</sdf>
